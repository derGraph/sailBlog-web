// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  username          String    @id @unique
  email             String    @unique
  firstName         String?
  lastName          String?
  description       String?   @db.Text
  profilePicture    Media?    @relation("profilePicture", fields: [profilePictureId], references: [id])
  profilePictureId  String?   @unique
  dateOfBirth       DateTime?
  role              Role      @relation(fields: [roleId], references: [id])
  roleId            String    @default("user")
  skipperedTrips    Trip[] @relation("skipper")
  crewedTrips       Trip[] @relation("crew")
  activeTrip        Trip?   @relation(fields: [activeTripId], references: [id], onDelete: SetNull)
  activeTripId      String?
  crewedLengthSail      Int       @default(0)
  crewedLengthMotor     Int       @default(0)
  skipperedLengthSail   Int       @default(0)
  skipperedLengthMotor  Int       @default(0)
  recalculate       Boolean   @default(true)
  uploadedMedia     Media[]   @relation("uploader")                
  sessions          Session[]
  key               Key[]
  lastPing          DateTime  @default(now())
}

model Session {
  id                String    @id
  userId            String
  expiresAt         DateTime
  user              User      @relation(references: [username], fields: [userId], onDelete: Cascade)
  ip                String?
  session_created   DateTime?
  last_use          DateTime?
}

model Role {
  id                String    @id
  users             User[]
}

model Key {
  id                String    @id @unique @default(cuid())
  type              String
  passwordHash      String?
  userId            String
  primary           Boolean
  user              User      @relation(fields: [userId], references: [username], onDelete: Cascade)
  @@index([userId])
}

model Trip {
  id                String    @id @default(cuid())
  name              String
  description       String?   @db.Text
  startPoint        Datapoint?@relation("startPoint", fields: [startPointId], references: [id])
  startPointId      String?   @unique
  endPoint          Datapoint?@relation("endPoint", fields: [endPointId], references: [id])
  endPointId        String?   @unique
  datapoints        Datapoint[]
  activeUser        User[]
  last_update       DateTime  @updatedAt
  length_sail       Decimal?
  length_motor      Decimal?
  skipper           User?     @relation("skipper", fields: [skipperName], references: [username])
  skipperName       String?
  crew              User[]    @relation("crew")
  visibility        Int       @default(1) // 0: private
                                          // 1: logged in
                                          // 2: public 
  recalculate       Boolean   @default(true)
  deleted           Boolean   @default(false)
  }

model Datapoint {
  id                String    @id @default(cuid())
  tripStart         Trip?     @relation("startPoint")
  tripEnd           Trip?     @relation("endPoint")
  trip              Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId            String
  time              DateTime  @default(now())
  lat               Decimal
  long              Decimal
  speed             Decimal?
  heading           Decimal?
  depth             Decimal?
  h_accuracy        Decimal?
  v_accuracy        Decimal?
  propulsion        Int? // 0: anchor
                            // 1: motor
                            // 2: sailing
  optimized         Int     @default(0) // 0: to optimize
                                        // 1: deleted
                                        // 2: needed
}

model Media {
  id                String    @id @default(cuid())
  visibility        Int       @default(1) // 0: private
                                          // 1: logged in
                                          // 2: public 
  user              User      @relation("uploader", fields: [username], references: [username])
  profilePicture    User?     @relation("profilePicture")
  username          String
  alt               String?
}